{{- if .Values.devicePlugin.enabled }}
---
{{- $daemonsetName := printf "%s" (include "maverikflats-device-plugin.fullname" .) | trunc 63 | trimSuffix "-" }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ $daemonsetName }}
  namespace: kube-system
  labels:
    {{- include "maverikflats-device-plugin.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "maverikflats-device-plugin.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "maverikflats-device-plugin.templateLabels" . | nindent 8 }}
    spec:
      initContainers:
        - name: set-permissions
          image: busybox:latest
          command:
            - sh
            - -c
            - |
              # Set default user and group IDs
              DEFAULT_USER_ID=root
              DEFAULT_GROUP_ID=qemu

              # Check if environment variable is set
              if [ ! -z "$USER_ID" ]; then
              echo "Using provided USER_ID: $USER_ID"
              USER_ID_TO_USE=$USER_ID
              else
              echo "No USER_ID provided, using default: $DEFAULT_USER_ID"
              USER_ID_TO_USE=$DEFAULT_USER_ID
              fi

              # Check if group ID is provided, otherwise use same as user ID
              if [ ! -z "$GROUP_ID" ]; then
              GROUP_ID_TO_USE=$GROUP_ID
              else
              GROUP_ID_TO_USE=$USER_ID_TO_USE
              fi

              echo "Will use user:group = $USER_ID_TO_USE:$GROUP_ID_TO_USE"

              # Process each path
              for path in /dev/dri /dev/dri/card0 /dev/dri/renderD128 /dev/udmabuf /dev/vfio /dev/bus/usb /tmp/.X11-unix; do
                if [ -e "$path" ]; then
                  echo "Path $path exists, changing ownership to $USER_ID_TO_USE:$GROUP_ID_TO_USE"
                  chown -R $USER_ID_TO_USE:$GROUP_ID_TO_USE $path
                  chmod 777 $path
                else
                  echo "Path $path does not exist, skipping"
                fi
              done
          securityContext:
            privileged: true
            seLinuxOptions:
              level: s0
          env:
            - name: USER_ID
              value: "{{ .Values.userId}}"
            - name: GROUP_ID
              value: "{{ .Values.groupId}}"
          volumeMounts:
            - name: dev-dri-mount
              mountPath: /dev/dri
            - name: udma-mount
              mountPath: /dev/udmabuf
            - name: tmp-mount
              mountPath: /tmp
            - name: vfio-mount
              mountPath: /dev/vfio
            - name: usb-mount
              mountPath: /dev/bus/usb
      containers:
        {{- if .Values.intelIdvPluginEnabled }}
        - name: intel-idv-device-plugin
          image: {{ include "maverikflats-device-plugin.fullimage" . }}
          imagePullPolicy: Always
          volumeMounts:
            - name: device-plugin
              mountPath: /var/lib/kubelet/device-plugins
            - name: dev-dri-mount
              mountPath: /dev/dri
            - name: udma-mount
              mountPath: /dev/udmabuf
            - name: tmp-mount
              mountPath: /tmp
            - name: vfio-mount
              mountPath: /dev/vfio
            - name: usb-mount
              mountPath: /dev/bus/usb
        {{- end }}
      volumes:
        - name: device-plugin
          hostPath:
            path: /var/lib/kubelet/device-plugins
        - name: tmp-mount
          hostPath:
            path: /tmp
        - name: dev-dri-mount
          hostPath:
            path: /dev/dri
        - name: udma-mount
          hostPath:
            path: /dev/udmabuf
        - name: vfio-mount
          hostPath:
            path: /dev/vfio
        - name: usb-mount
          hostPath:
            path: /dev/bus/usb
{{- end }}
